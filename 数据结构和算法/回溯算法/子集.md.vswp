vnote_backup_file_826537664 G:/notes/数据结构和算法/回溯算法/子集.md
# 1. 题目
给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。

说明：解集不能包含重复的子集。

示例:

输入: nums = [1,2,3]
输出:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
# 2. Solution
本解法采用回溯算法实现，回溯算法的基本形式是“递归+循环”，正因为循环中嵌套着递归，递归中包含循环，这才使得回溯比一般的递归和单纯的循环更难理解，其实我们熟悉了它的基本形式，就会觉得这样的算法难度也不是很大。原数组中的每个元素有两种状态：存在和不存在。

① 外层循环逐一往中间集合 temp 中加入元素 nums[i]，使这个元素处于存在状态

② 开始递归，递归中携带加入新元素的 temp，并且下一次循环的起始是 i 元素的下一个，因而递归中更新 i 值为 i + 1

③ 将这个从中间集合 temp 中移除，使该元素处于不存在状态

# 3. Code
```
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        dfs(result , list , nums ,0);
        return result ;
        
    }
    
     public void dfs(List<List<Integer>>result , List<Integer>  list ,  int[] nums ,int j ){
         result.add(new ArrayList<Integer>(list));
         for(int  i = j ;i<nums.length;i++){
             list.add(nums[i]);
             dfs(result,list, nums ,i+1);
             list.remove(list.size()-1);
         }
         
     }
}
```